<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>手写Spring（4）实现属性注入</title>
    <link href="/2022/11/23/2022-11-23-%E6%89%8B%E5%86%99Spring%EF%BC%884%EF%BC%89/"/>
    <url>/2022/11/23/2022-11-23-%E6%89%8B%E5%86%99Spring%EF%BC%884%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="1、设计"><a href="#1、设计" class="headerlink" title="1、设计"></a>1、设计</h3><p>虽然创建出了Bean的实例对象，但是对象内部的属性值依然还是空的，现在我们要将这些值填满。填满这些属性得在Bean创建完毕后进行，即在CreatBean方法中创建好实例对象之后进行。</p><p><img src="/2022-11-23-%E6%89%8B%E5%86%99Spring%EF%BC%884%EF%BC%89.assets/image-20221123214024486.png" alt="image-20221123214024486"></p><ul><li>我们在<code>createBean()</code>中添加<code>applyPropertyValues()</code>方法，利用该方法去帮助我们注入属性。</li><li>既然要注入属性我们需要知道有那些属性，所以在BeanDinfination中增加属性的定义PropertyValues。</li><li>Bean中的属性并不只是包含了基本类型，还包括了其他的Bean，比如我们SpringMVC架构在Service层会包含多个Dao层的属性。所以再定义一个BeanReference，创建时递归创建（Spring常说的循环依赖问题就出现在这边）</li></ul><h2 id="2、代码"><a href="#2、代码" class="headerlink" title="2、代码"></a>2、代码</h2><h4 id="1、补充三个类：properValue，properValues，BeanReference。"><a href="#1、补充三个类：properValue，properValues，BeanReference。" class="headerlink" title="1、补充三个类：properValue，properValues，BeanReference。"></a>1、补充三个类：properValue，properValues，BeanReference。</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package com.<span class="hljs-property">cmx</span>.<span class="hljs-property">springframework</span>.<span class="hljs-property">beans</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PropertyValue</span> &#123;<br>    <span class="hljs-keyword">private</span> final <span class="hljs-title class_">String</span> name;<br>    <span class="hljs-keyword">private</span> final <span class="hljs-title class_">Object</span> value;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">PropertyValue</span>(<span class="hljs-title class_">String</span> name, <span class="hljs-title class_">Object</span> value) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = value;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Object</span> <span class="hljs-title function_">getValue</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里有两个简单的字段，name和value，代表属性名和属性值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cmx.springframework.beans;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PropertyValues</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;PropertyValue&gt; propertyValueList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> PropertyValue[] getPropertyValues() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.propertyValueList.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PropertyValue</span>[<span class="hljs-number">0</span>]);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addPropertyValue</span><span class="hljs-params">(PropertyValue pv)</span>&#123;<br>        <span class="hljs-built_in">this</span>.propertyValueList.add(pv);<br>    &#125;<br>    <span class="hljs-keyword">public</span> PropertyValue <span class="hljs-title function_">getPropertyValue</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-keyword">for</span> (PropertyValue propertyValue : <span class="hljs-built_in">this</span>.propertyValueList) &#123;<br>            <span class="hljs-keyword">if</span>(propertyValue.getName().equals(name))&#123;<br>                <span class="hljs-keyword">return</span> propertyValue;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>PropertyValues是属性列表因为属性可能不止一个。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs arduino">package com.cmx.springframework.beans.factory.config;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 一个bean对另一个bean的引用</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * @author 小雄不是大雄</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BeanReference</span> &#123;<br><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> beanName;<br><br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">BeanReference</span><span class="hljs-params">(<span class="hljs-type">String</span> beanName)</span> </span>&#123;<br>      <span class="hljs-keyword">this</span>.beanName = beanName;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-title">getBeanName</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">return</span> beanName;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>增加BeanReference类，包装一个bean对另一个bean的引用。</p><h4 id="2、BeanDefinition修改"><a href="#2、BeanDefinition修改" class="headerlink" title="2、BeanDefinition修改"></a>2、BeanDefinition修改</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">package</span> com.cmx.springframework.beans.factory.config;<br><br><span class="hljs-keyword">import</span> com.cmx.springframework.beans.PropertyValues;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> BeanDefinition &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">Class</span> beanClass;<br>    <span class="hljs-keyword">private</span> PropertyValues propertyValues;<br><br>    <span class="hljs-keyword">public</span> BeanDefinition(<span class="hljs-keyword">Class</span> beanClass) &#123;<br>        <span class="hljs-keyword">this</span>.beanClass = beanClass;<br>        <span class="hljs-keyword">this</span>.propertyValues = <span class="hljs-keyword">new</span> PropertyValues();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> BeanDefinition(<span class="hljs-keyword">Class</span> beanClass, PropertyValues propertyValues) &#123;<br>        <span class="hljs-keyword">this</span>.beanClass = beanClass;<br>        <span class="hljs-keyword">this</span>.propertyValues = propertyValues != <span class="hljs-keyword">null</span> ? propertyValues : <span class="hljs-keyword">new</span> PropertyValues();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>补充propertyValues字段，增加一个有参构造函数。</p><h4 id="3、修改AbstractAutowireCapableBeanFactory"><a href="#3、修改AbstractAutowireCapableBeanFactory" class="headerlink" title="3、修改AbstractAutowireCapableBeanFactory"></a>3、修改AbstractAutowireCapableBeanFactory</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">protected Object create<span class="hljs-constructor">Bean(String <span class="hljs-params">beanName</span>, BeanDefinition <span class="hljs-params">beanDefinition</span>, Object[] <span class="hljs-params">args</span>)</span> throws BeansException &#123;<br>    Object bean = null;<br>    <span class="hljs-keyword">try</span> &#123;<br>        bean = create<span class="hljs-constructor">BeanInstance(<span class="hljs-params">beanDefinition</span>, <span class="hljs-params">beanName</span>, <span class="hljs-params">args</span>)</span>;<br>        <span class="hljs-comment">//为bean填充属性</span><br>        apply<span class="hljs-constructor">PropertyValues(<span class="hljs-params">beanName</span>, <span class="hljs-params">bean</span>, <span class="hljs-params">beanDefinition</span>)</span>;<br>    &#125; catch (Exception e) &#123;<br>        throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">BeansException(<span class="hljs-string">&quot;Instantiation of bean failed&quot;</span>, <span class="hljs-params">e</span>)</span>;<br>    &#125;<br><br>    add<span class="hljs-constructor">Singleton(<span class="hljs-params">beanName</span>, <span class="hljs-params">bean</span>)</span>;<br>    return bean;<br>&#125;<br></code></pre></td></tr></table></figure><p>createBean方法中怎加调用applyPropertyValues方法</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Bean 属性填充</span><br><span class="hljs-comment"> */</span><br>protected void apply<span class="hljs-constructor">PropertyValues(String <span class="hljs-params">beanName</span>, Object <span class="hljs-params">bean</span>, BeanDefinition <span class="hljs-params">beanDefinition</span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        PropertyValues propertyValues = beanDefinition.get<span class="hljs-constructor">PropertyValues()</span>;<br>        <span class="hljs-keyword">for</span> (PropertyValue propertyValue : propertyValues.get<span class="hljs-constructor">PropertyValues()</span>) &#123;<br><br>            String name = propertyValue.get<span class="hljs-constructor">Name()</span>;<br>            Object value = propertyValue.get<span class="hljs-constructor">Value()</span>;<br><br>            <span class="hljs-keyword">if</span> (value instanceof BeanReference) &#123;<br>                <span class="hljs-comment">// A 依赖 B，获取 B 的实例化</span><br>                BeanReference beanReference = (BeanReference) value;<br>                value = get<span class="hljs-constructor">Bean(<span class="hljs-params">beanReference</span>.<span class="hljs-params">getBeanName</span>()</span>);<br>            &#125;<br>            <span class="hljs-comment">// 属性填充</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">BeanUtil</span>.</span></span>set<span class="hljs-constructor">FieldValue(<span class="hljs-params">bean</span>, <span class="hljs-params">name</span>, <span class="hljs-params">value</span>)</span>;<br>        &#125;<br>    &#125; catch (Exception e) &#123;<br>        throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">BeansException(<span class="hljs-string">&quot;Error setting property values：&quot;</span> + <span class="hljs-params">beanName</span>)</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>该方法通过遍历BeanDefinition中的propertyValues列表，instanceof比较是否为一个Bean的引用，是进行递归调用—-&gt;通过beanReference中的BeanName调用getBean方法。（这边由于递归调用了所以会导致循环引用的问题，后面再说吧）</p></li><li><p>最后用hutool提供的BeanUtil将属性值填充进去。</p></li></ul><h2 id="3、测试"><a href="#3、测试" class="headerlink" title="3、测试"></a>3、测试</h2><h4 id="1、先来个UserDao"><a href="#1、先来个UserDao" class="headerlink" title="1、先来个UserDao"></a>1、先来个UserDao</h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">package</span> com.cmx.springframework.bean;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDao</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;<span class="hljs-keyword">String</span>, <span class="hljs-keyword">String</span>&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-type">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        hashMap.put(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;张三&quot;</span>);<br>        hashMap.put(<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;李四&quot;</span>);<br>        hashMap.put(<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;小雄&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> queryUserName(<span class="hljs-keyword">String</span> uId) &#123;<br>        <span class="hljs-keyword">return</span> hashMap.<span class="hljs-keyword">get</span>(uId);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、修改下UserService把UseDao作为属性放入"><a href="#2、修改下UserService把UseDao作为属性放入" class="headerlink" title="2、修改下UserService把UseDao作为属性放入"></a>2、修改下UserService把UseDao作为属性放入</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> uId;<br><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UserService</span><span class="hljs-params">(<span class="hljs-type">String</span> name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">queryUserInfo</span><span class="hljs-params">(<span class="hljs-type">String</span> name)</span> </span>&#123;<br>        System.out.<span class="hljs-built_in">println</span>(userDao.<span class="hljs-built_in">queryUserName</span>(name));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、编写测试类"><a href="#3、编写测试类" class="headerlink" title="3、编写测试类"></a>3、编写测试类</h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">package</span> com.cmx.springframework;<br><br><span class="hljs-keyword">import</span> com.cmx.springframework.bean.UserDao;<br><span class="hljs-keyword">import</span> com.cmx.springframework.bean.UserService;<br><span class="hljs-keyword">import</span> com.cmx.springframework.beans.PropertyValue;<br><span class="hljs-keyword">import</span> com.cmx.springframework.beans.PropertyValues;<br><span class="hljs-keyword">import</span> com.cmx.springframework.beans.factory.config.BeanDefinition;<br><span class="hljs-keyword">import</span> com.cmx.springframework.beans.factory.config.BeanReference;<br><span class="hljs-keyword">import</span> com.cmx.springframework.beans.factory.support.DefaultListableBeanFactory;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ApiTest</span> </span>&#123;<br>    @Test<br>    <span class="hljs-keyword">public</span> void test_BeanFactory()&#123;<br>        <span class="hljs-comment">// 1.初始化 BeanFactory</span><br>        DefaultListableBeanFactory beanFactory = <span class="hljs-keyword">new</span> <span class="hljs-type">DefaultListableBeanFactory</span>();<br><br>        <span class="hljs-comment">//2.注册一个Dao</span><br>        beanFactory.registerBeanDefinition(<span class="hljs-string">&quot;userDao&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-type">BeanDefinition</span>(UserDao.class));<br>        <span class="hljs-comment">// 3. UserService 设置属性[uId、userDao]</span><br>        PropertyValues propertyValues = <span class="hljs-keyword">new</span> <span class="hljs-type">PropertyValues</span>();<br>        propertyValues.addPropertyValue(<span class="hljs-keyword">new</span> <span class="hljs-type">PropertyValue</span>(<span class="hljs-string">&quot;uId&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>));<br>        propertyValues.addPropertyValue(<span class="hljs-keyword">new</span> <span class="hljs-type">PropertyValue</span>(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;小雄&quot;</span>));<br>        propertyValues.addPropertyValue(<span class="hljs-keyword">new</span> <span class="hljs-type">PropertyValue</span>(<span class="hljs-string">&quot;userDao&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-type">BeanReference</span>(<span class="hljs-string">&quot;userDao&quot;</span>)));<br><br>        <span class="hljs-comment">//4、UserService 注入带属性值的Bean</span><br>        BeanDefinition beanDefinition = <span class="hljs-keyword">new</span> <span class="hljs-type">BeanDefinition</span>(UserService.class,propertyValues);<br>        beanFactory.registerBeanDefinition(<span class="hljs-string">&quot;userService&quot;</span>,beanDefinition);<br>        <span class="hljs-comment">// 5. UserService 获取bean</span><br>        UserService userService = (UserService) beanFactory.getBean(<span class="hljs-string">&quot;userService&quot;</span>);<br>        userService.queryUserInfo(<span class="hljs-string">&quot;3&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>先在容器中注册一个userDao，之后将属性设置进propertyValues里面，这里增加了BeanReference用来声明一个引用。注册UserServier。</p><h4 id="4、运行结果"><a href="#4、运行结果" class="headerlink" title="4、运行结果"></a>4、运行结果</h4><p><img src="/2022-11-23-%E6%89%8B%E5%86%99Spring%EF%BC%884%EF%BC%89.assets/image-20221123232952988.png" alt="image-20221123232952988"></p><p>我们看到程序正常执行，我们通过userService成功调用到了userService中的userDao说明注入成功了。</p>]]></content>
    
    
    <categories>
      
      <category>手写Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Spring</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手写Spring（3）实现有参构造</title>
    <link href="/2022/11/21/2022-11-21-%E6%89%8B%E5%86%99Spring%EF%BC%883%EF%BC%89/"/>
    <url>/2022/11/21/2022-11-21-%E6%89%8B%E5%86%99Spring%EF%BC%883%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="1、问题"><a href="#1、问题" class="headerlink" title="1、问题"></a>1、问题</h2><p><img src="/2022-11-21-%E6%89%8B%E5%86%99Spring%EF%BC%883%EF%BC%89.assets/image-20221121202210006.png" alt="image-20221121202210006"></p><p>在上一篇中我们使用了<code>newInstance()</code>实例化对象，但是这种实例化方式只能适应于无参构造函数，一旦存在有参构造函数就会出错。接下来就是优化这个问题，实现有参构造。</p><h2 id="2、设计"><a href="#2、设计" class="headerlink" title="2、设计"></a>2、设计</h2><p>解决这个问题我们需要考虑两点，一是参数怎么传进来，二是怎么利用这些参数去实例化出对象。</p><p>一、参数如何传递进来我们看看Spring是如何实现的，Spring的BeanFactory中提供了<code>Object getBean(String name, Object... args)</code>方法。这个方法可以将参数传入，我们可以把他CV过来。</p><p><img src="/2022-11-21-%E6%89%8B%E5%86%99Spring%EF%BC%883%EF%BC%89.assets/Spring%E4%B8%AD%E7%9A%84getBean.png" alt="image-20221121203329507"></p><p>二、如何实例化对象。我们先看看我们手上有什么：一个Class对象、一些args参数，我们可以想到Java中有反射技术可以帮助我们去创建这个对象，两种反射技术JDK和Cglib选一个。</p><h2 id="3、实现"><a href="#3、实现" class="headerlink" title="3、实现"></a>3、实现</h2><h3 id="1、先把BeanFactory的getBean加上"><a href="#1、先把BeanFactory的getBean加上" class="headerlink" title="1、先把BeanFactory的getBean加上"></a>1、先把BeanFactory的getBean加上</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">package</span> com.<span class="hljs-property">cmx</span>.<span class="hljs-property">springframework</span>.<span class="hljs-property">beans</span>.<span class="hljs-property">factory</span>;<br><br><span class="hljs-keyword">import</span> com.<span class="hljs-property">cmx</span>.<span class="hljs-property">springframework</span>.<span class="hljs-property">beans</span>.<span class="hljs-property">BeansException</span>;<br><br><span class="hljs-keyword">public</span> interface BeanFactory &#123;<br><br>    <span class="hljs-built_in">Object</span> <span class="hljs-title function_">getBean</span>(<span class="hljs-built_in">String</span> name) <span class="hljs-keyword">throws</span> BeansException;<br><br>    <span class="hljs-built_in">Object</span> <span class="hljs-title function_">getBean</span>(<span class="hljs-built_in">String</span> name,<span class="hljs-built_in">Object</span>... args) <span class="hljs-keyword">throws</span> BeansException;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>重载一个带参数args的<code>getBean</code>方法</p><h3 id="2、定义实例化策略接口"><a href="#2、定义实例化策略接口" class="headerlink" title="2、定义实例化策略接口"></a>2、定义实例化策略接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cmx.springframework.beans.factory.support;<br><br><span class="hljs-keyword">import</span> com.cmx.springframework.beans.BeansException;<br><span class="hljs-keyword">import</span> com.cmx.springframework.beans.factory.config.BeanDefinition;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">InstantiationStrategy</span> &#123;<br>    Object <span class="hljs-title function_">instantiate</span><span class="hljs-params">(BeanDefinition beanDefinition, String beanName, Constructor ctor, Object[] args)</span> <span class="hljs-keyword">throws</span> BeansException;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>实例化接口中声明<code>instantiate </code>方法，该方法传入必要值beanDfinition、beanName、ctor、args。</p><p>Constructor是反射包下的一个类，包含了一个类的基本信息，args就是入参的参数啦。</p><p><img src="/2022-11-21-%E6%89%8B%E5%86%99Spring%EF%BC%883%EF%BC%89.assets/image-20221121205619992.png" alt="image-20221121205619992"></p><h3 id="4、JDK实例化"><a href="#4、JDK实例化" class="headerlink" title="4、JDK实例化"></a>4、JDK实例化</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">package</span> com.cmx.springframework.beans.factory.support;<br><br><span class="hljs-keyword">import</span> com.cmx.springframework.beans.BeansException;<br><span class="hljs-keyword">import</span> com.cmx.springframework.beans.factory.config.BeanDefinition;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SimpleInstantiationStrategy</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">InstantiationStrategy</span></span></span>&#123;<br>    @Override<br>    <span class="hljs-keyword">public</span> Object instantiate(BeanDefinition beanDefinition, <span class="hljs-keyword">String</span> beanName, Constructor ctor, Object[] args) throws BeansException &#123;<br>        <span class="hljs-comment">//通过beanDefinition获取class</span><br>        Class beanClass = beanDefinition.getBeanClass();<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span>!=ctor)&#123;<br>                <span class="hljs-comment">//核心为getDeclaredConstructor，该方法会根据传入的ctor.getParameterTypes返回对应的构造函数。</span><br>                <span class="hljs-keyword">return</span> beanClass.getDeclaredConstructor(ctor.getParameterTypes()).<span class="hljs-keyword">new</span><span class="hljs-type">Instance</span>(args);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">return</span> beanClass.getDeclaredConstructor().<span class="hljs-keyword">new</span><span class="hljs-type">Instance</span>();<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (NoSuchMethodException | InstantiationException | IllegalAccessException | InvocationTargetException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-type">BeansException</span>(<span class="hljs-string">&quot;Failed to instantiate [&quot;</span> + beanClass.getName() + <span class="hljs-string">&quot;]&quot;</span>, e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>看一下<code>getDeclaredConstructor</code>方法，这个方法根据传入的参数类型选择对应的构造器。</p><h3 id="5、Cglib实例化"><a href="#5、Cglib实例化" class="headerlink" title="5、Cglib实例化"></a>5、Cglib实例化</h3><p>使用Cglib前先导入Maven坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/cglib/cglib --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cglib<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cglib<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>&lt;/dependency<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cmx.springframework.beans.factory.support;<br><br><span class="hljs-keyword">import</span> com.cmx.springframework.beans.BeansException;<br><span class="hljs-keyword">import</span> com.cmx.springframework.beans.factory.config.BeanDefinition;<br><span class="hljs-keyword">import</span> net.sf.cglib.proxy.Enhancer;<br><span class="hljs-keyword">import</span> net.sf.cglib.proxy.NoOp;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CglibSubclassingInstantiationStrategy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InstantiationStrategy</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">instantiate</span><span class="hljs-params">(BeanDefinition beanDefinition, String beanName, Constructor ctor, Object[] args)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        <span class="hljs-type">Enhancer</span> <span class="hljs-variable">enhancer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Enhancer</span>();<br>        enhancer.setSuperclass(beanDefinition.getBeanClass());<br>        enhancer.setCallback(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NoOp</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.hashCode();<br>            &#125;<br>        &#125;);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span>==ctor) <span class="hljs-keyword">return</span> enhancer.create();<br>        <span class="hljs-keyword">return</span> enhancer.create(ctor.getParameterTypes(),args);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>使用Cglib其实很简单，我们需要创建一个enhancer，调用setSuperclass将我们的代理对象传入。在cglib中Callback是一个标记接口，Enhancer使用的回调就是cglib中Callback接口的子接口。Callback-NoOp这个回调&#x3D;啥也不干。源码中还有CallbackFilter 等实现，我们一切从简。</p><h3 id="6、调用"><a href="#6、调用" class="headerlink" title="6、调用"></a>6、调用</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package com.<span class="hljs-property">cmx</span>.<span class="hljs-property">springframework</span>.<span class="hljs-property">beans</span>.<span class="hljs-property">factory</span>.<span class="hljs-property">support</span>;<br><br><span class="hljs-keyword">import</span> com.<span class="hljs-property">cmx</span>.<span class="hljs-property">springframework</span>.<span class="hljs-property">beans</span>.<span class="hljs-property">BeansException</span>;<br><span class="hljs-keyword">import</span> com.<span class="hljs-property">cmx</span>.<span class="hljs-property">springframework</span>.<span class="hljs-property">beans</span>.<span class="hljs-property">factory</span>.<span class="hljs-property">config</span>.<span class="hljs-property">BeanDefinition</span>;<br><br><span class="hljs-keyword">import</span> java.<span class="hljs-property">lang</span>.<span class="hljs-property">reflect</span>.<span class="hljs-property">Constructor</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractAutowireCapableBeanFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">AbstractBeanFactory</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">InstantiationStrategy</span> instantiationStrategy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CglibSubclassingInstantiationStrategy</span>();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-title class_">Object</span> <span class="hljs-title function_">createBean</span>(<span class="hljs-title class_">String</span> beanName, <span class="hljs-title class_">BeanDefinition</span> beanDefinition, <span class="hljs-title class_">Object</span>[] args) throws <span class="hljs-title class_">BeansException</span> &#123;<br>        <span class="hljs-title class_">Object</span> bean = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            bean = <span class="hljs-title function_">createBeanInstance</span>(beanDefinition, beanName, args);<br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">Exception</span> e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeansException</span>(<span class="hljs-string">&quot;Instantiation of bean failed&quot;</span>, e);<br>        &#125;<br><br>        <span class="hljs-title function_">addSingleton</span>(beanName, bean);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-title class_">Object</span> <span class="hljs-title function_">createBeanInstance</span>(<span class="hljs-params">BeanDefinition beanDefinition, <span class="hljs-built_in">String</span> beanName, <span class="hljs-built_in">Object</span>[] args</span>) &#123;<br>        <span class="hljs-title class_">Constructor</span> constructorToUse = <span class="hljs-literal">null</span>;<br>        <span class="hljs-title class_">Class</span>&lt;?&gt; beanClass = beanDefinition.<span class="hljs-title function_">getBeanClass</span>();<br>        <span class="hljs-title class_">Constructor</span>&lt;?&gt;[] declaredConstructors = beanClass.<span class="hljs-title function_">getDeclaredConstructors</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-title class_">Constructor</span> ctor : declaredConstructors) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != args &amp;&amp; ctor.<span class="hljs-title function_">getParameterTypes</span>().<span class="hljs-property">length</span> == args.<span class="hljs-property">length</span>) &#123;<br>                constructorToUse = ctor;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">getInstantiationStrategy</span>().<span class="hljs-title function_">instantiate</span>(beanDefinition, beanName, constructorToUse, args);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">InstantiationStrategy</span> <span class="hljs-title function_">getInstantiationStrategy</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> instantiationStrategy;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setInstantiationStrategy</span>(<span class="hljs-params">InstantiationStrategy instantiationStrategy</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">instantiationStrategy</span> = instantiationStrategy;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>instantiationStrategy</code>为一个策略类通过set、get方法控制实例化方式（先写死Cglib的方法，创建时调用set方法或者增加构造函数都行），添加<code>createBeanInstance</code>方法用于获得对应的<code>beanClass.getDeclaredConstructors();</code>这个方法获取到所以的构造方法，进行遍历去判断具体使用哪一个构造方法（这边偷懒就简单判断了下参数的数量，其实还得判断类型等）。</p><h2 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h2><h3 id="1、建一个有参构造的Bean"><a href="#1、建一个有参构造的Bean" class="headerlink" title="1、建一个有参构造的Bean"></a>1、建一个有参构造的Bean</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package com.<span class="hljs-property">cmx</span>.<span class="hljs-property">springframework</span>.<span class="hljs-property">bean</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">UserService</span>(<span class="hljs-title class_">String</span> name) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">queryUserInfo</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;查询用户信息：&quot;</span> + name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>        final <span class="hljs-title class_">StringBuilder</span> sb = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;&quot;</span>);<br>        sb.<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">append</span>(name);<br>        <span class="hljs-keyword">return</span> sb.<span class="hljs-title function_">toString</span>();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、测试用例"><a href="#2、测试用例" class="headerlink" title="2、测试用例"></a>2、测试用例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cmx.springframework;<br><br><span class="hljs-keyword">import</span> com.cmx.springframework.bean.UserService;<br><span class="hljs-keyword">import</span> com.cmx.springframework.beans.factory.config.BeanDefinition;<br><span class="hljs-keyword">import</span> com.cmx.springframework.beans.factory.support.DefaultListableBeanFactory;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApiTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test_BeanFactory</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 1.初始化 BeanFactory</span><br>        <span class="hljs-type">DefaultListableBeanFactory</span> <span class="hljs-variable">beanFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultListableBeanFactory</span>();<br><br>        <span class="hljs-comment">// 2. 注入bean</span><br>        <span class="hljs-type">BeanDefinition</span> <span class="hljs-variable">beanDefinition</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanDefinition</span>(UserService.class);<br>        beanFactory.registerBeanDefinition(<span class="hljs-string">&quot;userService&quot;</span>, beanDefinition);<br><br>        <span class="hljs-comment">// 3.获取bean</span><br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> (UserService) beanFactory.getBean(<span class="hljs-string">&quot;userService&quot;</span>, <span class="hljs-string">&quot;是小雄不是大雄&quot;</span>);<br>        userService.queryUserInfo();<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>流程依然是先初始化BeanFactory、注册Bean、获取Bean，不同之处仅仅是增加了一个参数。</p><h3 id="3、结果"><a href="#3、结果" class="headerlink" title="3、结果"></a>3、结果</h3><p><img src="/2022-11-21-%E6%89%8B%E5%86%99Spring%EF%BC%883%EF%BC%89.assets/image-20221121223046748.png" alt="image-20221121223046748"></p>]]></content>
    
    
    <categories>
      
      <category>手写Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Spring</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手写Spring（2）实现 Bean 的定义、注册、获取</title>
    <link href="/2022/11/20/2022-11-20-%E6%89%8B%E5%86%99Spring%EF%BC%882%EF%BC%89/"/>
    <url>/2022/11/20/2022-11-20-%E6%89%8B%E5%86%99Spring%EF%BC%882%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="1、设计"><a href="#1、设计" class="headerlink" title="1、设计"></a>1、设计</h2><p>在上一篇中我们创建了一个简陋版本的Spring Bean容器。本篇完善Spring Bean容器的功能，实现Bean的定义、注册、获取。如上一篇所说，我们不需要手动再创建Bean并传入了，将这份工作交给SpringFactory做就好了。</p><p>在上一篇中，我们BeanDifinition中的Bean属性为Object，为了能够进行扩展，只需要在注册时注册该类的Class信息而不需要实例信息，将Object改为Class。之后就是在获取Bean对象时需要去实例化该对象并判断该对象是否在缓存中。</p><img src="手写Spring（2）.assets/image-20221120192610331.png" alt="image-20221120192610331" style="zoom:80%;" /><ol><li>定义好BeanFactory并提供<code>getBean()</code>方法，由AbstractBeanFactory抽象工厂类去实现BeanFactory接口。</li><li>那么在继承抽象类 AbstractBeanFactory 后的 AbstractAutowireCapableBeanFactory 就可以实现相应的抽象方法了，因为 AbstractAutowireCapableBeanFactory 本身也是一个抽象类，所以它只会实现属于自己的抽象方法，其他抽象方法由继承 AbstractAutowireCapableBeanFactory 的类实现。这里就体现了类实现过程中的各司其职，你只需要关心属于你的内容，不是你的内容，不要参与。</li><li>关于单例 SingletonBeanRegistry 的接口定义实现，而 DefaultSingletonBeanRegistry 对接口实现后，会被抽象类 AbstractBeanFactory 继承。现在 AbstractBeanFactory 就是一个非常完整且强大的抽象类了，也能非常好的体现出它对模板模式的抽象定义。</li></ol><h2 id="2、实现"><a href="#2、实现" class="headerlink" title="2、实现"></a>2、实现</h2><p><img src="/%E6%89%8B%E5%86%99Spring%EF%BC%882%EF%BC%89.assets/image-20221120193948087.png" alt="image-20221120193948087"></p><p>这一个目录结构是不是有点Spring源码那味了。</p><img src="手写Spring（2）.assets/image-20221120202713364.png" alt="image-20221120202713364" style="zoom: 80%;" /><ul><li><strong>BeanFactory</strong>接口定义的<code>getBean()</code>由<strong>AbstractBeanFactory</strong>实现</li><li><strong>AbstractBeanFactory</strong>继承了实现了<strong>SingletonBeanRegistry</strong>的<strong>DefaultSingletionBeanRegistry</strong>，所以具备了单例Bean的注册功能。</li><li><strong>AbstractBeanFactory</strong>中又定义了两个抽象方法：<code>getBeanDefinition(String beanName)</code>、<code>createBean(String beanName, BeanDefinition beanDefinition)</code> ，而这两个抽象方法分别由<strong>DefaultListableBeanFactory</strong>、<strong>AbstractAutowireCapableBeanFactory</strong> 实现。</li><li>最终 <strong>DefaultListableBeanFactory</strong> 还会继承抽象类 <strong>AbstractAutowireCapableBeanFactory</strong> 也就可以调用抽象类中的 <code>createBean</code> 方法了。</li></ul><h3 id="BeanDefinition"><a href="#BeanDefinition" class="headerlink" title="BeanDefinition"></a>BeanDefinition</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">package</span> com.cmx.springframework.beans.factory.config;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BeanDefinition</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Class beanClass;<br><br>    <span class="hljs-keyword">public</span> BeanDefinition(Class beanClass) &#123;<br>        <span class="hljs-keyword">this</span>.beanClass = beanClass;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Class getBeanClass() &#123;<br>        <span class="hljs-keyword">return</span> beanClass;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> BeanDefinition setBeanClass(Class beanClass) &#123;<br>        <span class="hljs-keyword">this</span>.beanClass = beanClass;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="单例注册接口定义和实现"><a href="#单例注册接口定义和实现" class="headerlink" title="单例注册接口定义和实现"></a>单例注册接口定义和实现</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">package</span> com.cmx.springframework.beans.factory.config;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">SingletonBeanRegistry</span> </span>&#123;<br><br>    Object getSingleton(<span class="hljs-keyword">String</span> beanName);<br><br>&#125;<br> <br></code></pre></td></tr></table></figure><ul><li>定义一个获取单例对象的接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cmx.springframework.beans.factory.support;<br><br><span class="hljs-keyword">import</span> com.cmx.springframework.beans.factory.config.SingletonBeanRegistry;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultSingletonBeanRegistry</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SingletonBeanRegistry</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Map&lt;String, Object&gt; singletonObjects = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getSingleton</span><span class="hljs-params">(String beanName)</span> &#123;<br>        <span class="hljs-keyword">return</span> singletonObjects.get(beanName);<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addSingleton</span><span class="hljs-params">(String beanName, Object singletonObject)</span> &#123;<br>        singletonObjects.put(beanName, singletonObject);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>在 DefaultSingletonBeanRegistry 中主要实现 getSingleton 方法，同时实现了一个受保护的 addSingleton 方法，这个方法可以被子类调用。</li></ul><h3 id="抽象类定义模板方法-AbstractBeanFactory"><a href="#抽象类定义模板方法-AbstractBeanFactory" class="headerlink" title="抽象类定义模板方法(AbstractBeanFactory)"></a>抽象类定义模板方法(AbstractBeanFactory)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cmx.springframework.beans.factory.support;<br><br><span class="hljs-keyword">import</span> com.cmx.springframework.beans.BeansException;<br><span class="hljs-keyword">import</span> com.cmx.springframework.beans.factory.BeanFactory;<br><span class="hljs-keyword">import</span> com.cmx.springframework.beans.factory.config.BeanDefinition;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractBeanFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DefaultSingletonBeanRegistry</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanFactory</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getBean</span><span class="hljs-params">(String name)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> getSingleton(name);<br>        <span class="hljs-keyword">if</span> (bean != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> bean;<br>        &#125;<br><br>        <span class="hljs-type">BeanDefinition</span> <span class="hljs-variable">beanDefinition</span> <span class="hljs-operator">=</span> getBeanDefinition(name);<br>        <span class="hljs-keyword">return</span> createBean(name, beanDefinition);<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> BeanDefinition <span class="hljs-title function_">getBeanDefinition</span><span class="hljs-params">(String beanName)</span> <span class="hljs-keyword">throws</span> BeansException;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> Object <span class="hljs-title function_">createBean</span><span class="hljs-params">(String beanName, BeanDefinition beanDefinition)</span> <span class="hljs-keyword">throws</span> BeansException;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>getBean()</code>方法先判断是否存在，不存在再进行实例化。</li><li>将实例化方法定义好由子类去实现。</li></ul><h3 id="实例化Bean类-AbstractAutowireCapableBeanFactory"><a href="#实例化Bean类-AbstractAutowireCapableBeanFactory" class="headerlink" title="实例化Bean类(AbstractAutowireCapableBeanFactory)"></a>实例化Bean类(AbstractAutowireCapableBeanFactory)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractAutowireCapableBeanFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractBeanFactory</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">createBean</span><span class="hljs-params">(String beanName, BeanDefinition beanDefinition)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            bean = beanDefinition.getBeanClass().newInstance();<br>        &#125; <span class="hljs-keyword">catch</span> (InstantiationException | IllegalAccessException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeansException</span>(<span class="hljs-string">&quot;Instantiation of bean failed&quot;</span>, e);<br>        &#125;<br><br>        addSingleton(beanName, bean);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>利用Class的<code>newInstance()</code>方法实例化对象，不过还需要考虑入参的问题。</p><h3 id="核心类实现-DefaultListableBeanFactory"><a href="#核心类实现-DefaultListableBeanFactory" class="headerlink" title="核心类实现(DefaultListableBeanFactory)"></a>核心类实现(DefaultListableBeanFactory)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cmx.springframework.beans.factory.support;<br><br><span class="hljs-keyword">import</span> com.cmx.springframework.beans.BeansException;<br><span class="hljs-keyword">import</span> com.cmx.springframework.beans.factory.config.BeanDefinition;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultListableBeanFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractAutowireCapableBeanFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanDefinitionRegistry</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Map&lt;String, BeanDefinition&gt; beanDefinitionMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerBeanDefinition</span><span class="hljs-params">(String beanName, BeanDefinition beanDefinition)</span> &#123;<br>        beanDefinitionMap.put(beanName, beanDefinition);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> BeanDefinition <span class="hljs-title function_">getBeanDefinition</span><span class="hljs-params">(String beanName)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        <span class="hljs-type">BeanDefinition</span> <span class="hljs-variable">beanDefinition</span> <span class="hljs-operator">=</span> beanDefinitionMap.get(beanName);<br>        <span class="hljs-keyword">if</span> (beanDefinition == <span class="hljs-literal">null</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeansException</span>(<span class="hljs-string">&quot;No bean named &#x27;&quot;</span> + beanName + <span class="hljs-string">&quot;&#x27; is defined&quot;</span>);<br>        <span class="hljs-keyword">return</span> beanDefinition;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>DefaultListableBeanFactory 继承了 AbstractAutowireCapableBeanFactory 类，也就具备了接口 BeanFactory 和 AbstractBeanFactory 等一连串的功能实现。</p></li><li><p>实现了接口 BeanDefinitionRegistry 中的 registerBeanDefinition(String beanName, BeanDefinition beanDefinition) 方法，当然你还会看到一个 getBeanDefinition 的实现，这个方法我们文中提到过它是抽象类 AbstractBeanFactory 中定义的抽象方法。<em>现在注册Bean定义与获取Bean定义就可以同时使用了，是不感觉这个套路还蛮深的。接口定义了注册，抽象类定义了获取，都集中在 DefaultListableBeanFactory 中的 beanDefinitionMap 里</em></p></li></ul><h2 id="3、测试"><a href="#3、测试" class="headerlink" title="3、测试"></a>3、测试</h2><h3 id="准备好UserService"><a href="#准备好UserService" class="headerlink" title="准备好UserService"></a>准备好UserService</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.cmx.springframework.bean;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">UserService</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">queryUserInfo</span>()</span>&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;查询用户信息&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="编写测试用例"><a href="#编写测试用例" class="headerlink" title="编写测试用例"></a>编写测试用例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cmx.springframework;<br><br><span class="hljs-keyword">import</span> com.cmx.springframework.bean.UserService;<br><span class="hljs-keyword">import</span> com.cmx.springframework.beans.factory.config.BeanDefinition;<br><span class="hljs-keyword">import</span> com.cmx.springframework.beans.factory.support.DefaultListableBeanFactory;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApiTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test_BeanFactory</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 1.初始化 BeanFactory</span><br>        <span class="hljs-type">DefaultListableBeanFactory</span> <span class="hljs-variable">beanFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultListableBeanFactory</span>();<br>        <span class="hljs-comment">// 2.注册 bean</span><br>        <span class="hljs-type">BeanDefinition</span> <span class="hljs-variable">beanDefinition</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanDefinition</span>(UserService.class);<br>        beanFactory.registerBeanDefinition(<span class="hljs-string">&quot;userService&quot;</span>, beanDefinition);<br>        <span class="hljs-comment">// 3.第一次获取 bean</span><br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> (UserService) beanFactory.getBean(<span class="hljs-string">&quot;userService&quot;</span>);<br>        userService.queryUserInfo();<br>        <span class="hljs-comment">// 4.第二次获取 bean from Singleton</span><br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">userService_singleton</span> <span class="hljs-operator">=</span> (UserService) beanFactory.getBean(<span class="hljs-string">&quot;userService&quot;</span>);<br>        userService_singleton.queryUserInfo();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>在此次的单元测试中除了包括；Bean 工厂、注册 Bean、获取 Bean，三个步骤，还额外增加了一次对象的获取和调用。这里主要测试验证单例对象的是否正确的存放到了缓存中。</p></li><li><p>此外与上一章节测试过程中不同的是，我们把 UserService.class 传递给了 BeanDefinition 而不是像上一章节那样直接 new UserService() 操作。</p></li></ul><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p><img src="/%E6%89%8B%E5%86%99Spring%EF%BC%882%EF%BC%89.assets/image-20221120211325107.png" alt="image-20221120211325107"></p>]]></content>
    
    
    <categories>
      
      <category>手写Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Spring</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手写Spring（1）实现一个简单的Bean容器</title>
    <link href="/2022/11/20/2022-11-20-%E6%89%8B%E5%86%99Spring%EF%BC%881%EF%BC%89/"/>
    <url>/2022/11/20/2022-11-20-%E6%89%8B%E5%86%99Spring%EF%BC%881%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="1、什么是Spring-Bean容器？"><a href="#1、什么是Spring-Bean容器？" class="headerlink" title="1、什么是Spring Bean容器？"></a>1、什么是Spring Bean容器？</h1><h4 id="什么是Bean"><a href="#什么是Bean" class="headerlink" title="什么是Bean"></a>什么是Bean</h4><p>Java Bean就是一种符合惯用模式和约定的类，由属性、方法和事件3部分组成。我们常常讲的属性的set、get方法就是其中的一种约定，所以Bean没有太精确的概念，可以把他当作用于处理业务的Java类就行。</p><h4 id="什么是Spring-Bean容器"><a href="#什么是Spring-Bean容器" class="headerlink" title="什么是Spring Bean容器"></a>什么是Spring Bean容器</h4><p>Spring中包含并管理对象的配置和生命周期，所以Spring就是一种承载Bean的容器，你可以对每个Bean如何创建、销毁进行配置，这些Bean需要创建一次还是多次等等。</p><h4 id="使用Spring-Bean容器的好处"><a href="#使用Spring-Bean容器的好处" class="headerlink" title="使用Spring Bean容器的好处"></a>使用Spring Bean容器的好处</h4><p>我们将Bean对象交给Spring管理，那么每个Bean之间复杂的依赖关系就从Bean&lt;—&gt;Bean转变为了Bean—&gt;Spring&lt;—Bean相当于一种解耦的操作，让Spring来统一管理Bean，Bean的初始化、属性填充都不需要调用者关系，只需要告知Spring我需要调用这个Bean。</p><h1 id="2、设计一个Spring-Bean容器"><a href="#2、设计一个Spring-Bean容器" class="headerlink" title="2、设计一个Spring Bean容器"></a>2、设计一个Spring Bean容器</h1><p>既然是一个容器，那么我们肯定想到各种用来存放数据的数据结构。如：ArrayList、LinkedList、HashMap等，但是我们想想，我们在使用Bean时需要快速的找到我们需要的Bean，那就需要一种能够做到快速检索的数据结构——–HashMap。</p><p>Java中的HashMap是数组+链表+红黑树的数据结构，利用Hash算法将数据均匀的分布在hash桶上，在没有hash冲突的情况下能做到O(1)的读取速度。所以非常时候实现Spring Bean容器。</p><p>同时一个Spring Bean容器不仅需要存放Bean，还需要Bean的定义、注册、获取三个基本步骤，设计如图：</p><p><img src="/%E6%89%8B%E5%86%99spring%EF%BC%881%EF%BC%89.assets/image-20221120162247753.png" alt="image-20221120162247753"></p><ul><li><p>定义：BeanDefinition，可能这是你在查阅 Spring 源码时经常看到的一个类，例如它会包括 singleton、prototype、BeanClassName 等。但目前我们初步实现会更加简单的处理，只定义一个 Object 类型用于存放对象。</p></li><li><p>注册：这个过程就相当于我们把数据存放到 HashMap 中，只不过现在 HashMap 存放的是定义了的 Bean 的对象信息。</p></li><li><p>获取：最后就是获取对象，Bean 的名字就是key，Spring 容器初始化好 Bean 以后，就可以直接获取了。</p></li></ul><h1 id="3、实现"><a href="#3、实现" class="headerlink" title="3、实现"></a>3、实现</h1><p><img src="/%E6%89%8B%E5%86%99spring%EF%BC%881%EF%BC%89.assets/image-20221120163145817.png" alt="image-20221120163145817"></p><p>文件目录如上</p><p>实现一个Bean容器相对比较简单，只需要一个简单的 BeanFactory 和 BeanDefinition，虽然比起Spring源码中的BeanFactory 和 BeanDefinition实在是太过简陋了，但是功能大体方向还是一致的。</p><p>1、BeanDefinition：定义实例化信息和存储对象。</p><p>2、BeanFactory ：Bean的工厂类，用于存放和获取Bean。</p><h4 id="1、BeanDefinition"><a href="#1、BeanDefinition" class="headerlink" title="1、BeanDefinition"></a>1、BeanDefinition</h4><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">package</span> com.<span class="hljs-property">cmx</span>.<span class="hljs-property">springframework</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * auth :小雄不是大雄</span><br><span class="hljs-comment"> * date: 2022/11/20</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BeanDefinition</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">Object</span> bean;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BeanDefinition</span>(<span class="hljs-built_in">Object</span> bean) &#123;<br>        <span class="hljs-variable">this</span>.<span class="hljs-property">bean</span> = bean;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">Object</span> <span class="hljs-title function_">getBean</span>() &#123;<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>首先我们定义一个Bean，这边暂时就只定义了这个Bean为Object，在Spring的源码中我们可以 看到还有SCOPE_SINGLETON、SCOPE_PROTOTYPE、ROLE_APPLICATION、ROLE_SUPPORT、ROLE_INFRASTRUCTURE等一系列Bean Class信息。<img src="/%E6%89%8B%E5%86%99spring%EF%BC%881%EF%BC%89.assets/image-20221120185727925.png" alt="image-20221120185727925"></p><h4 id="2、BeanFactory"><a href="#2、BeanFactory" class="headerlink" title="2、BeanFactory"></a>2、BeanFactory</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package com.<span class="hljs-property">cmx</span>.<span class="hljs-property">springframework</span>;<br><br><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">Map</span>;<br><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">concurrent</span>.<span class="hljs-property">ConcurrentHashMap</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * auth :小雄不是大雄</span><br><span class="hljs-comment"> * date: 2022/11/20</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BeanFactory</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">Map</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">BeanDefinition</span>&gt; beanDefinitionMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Object</span> <span class="hljs-title function_">getBean</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> name</span>) &#123;<br>        <span class="hljs-keyword">return</span> beanDefinitionMap.<span class="hljs-title function_">get</span>(name).<span class="hljs-title function_">getBean</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">registerBeanDefinition</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> name, BeanDefinition beanDefinition</span>) &#123;<br>        beanDefinitionMap.<span class="hljs-title function_">put</span>(name, beanDefinition);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>BeanFactory中有一个ConcurrentHashMap，使用ConcurrentHashMap是因为这是一个线程安全的map，可以避免并发场景下的问题。目前的BeanFactory也是比较简陋的，提供了<code>getBean()</code>和<code>registerBeanDefinition()</code>两个方法：</p><ul><li><p>getBean：通过name获取到Bean</p></li><li><p>registerBeanDefinition：将Bean注册到Map中</p></li></ul><h2 id="5、测试效果"><a href="#5、测试效果" class="headerlink" title="5、测试效果"></a>5、测试效果</h2><h4 id="1、准备好一个Bean"><a href="#1、准备好一个Bean" class="headerlink" title="1、准备好一个Bean"></a>1、准备好一个Bean</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">queryUserInfo</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;查询用户信息&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>先创建一个UserService。</p><h4 id="2、创建测试类"><a href="#2、创建测试类" class="headerlink" title="2、创建测试类"></a>2、创建测试类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cmx.springframework;<br><br><span class="hljs-keyword">import</span> com.cmx.springframework.bean.UserService;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApiTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test_BeanFactory</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 1.初始化 BeanFactory</span><br>        <span class="hljs-type">BeanFactory</span> <span class="hljs-variable">beanFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanFactory</span>();<br><br>        <span class="hljs-comment">// 2.注册 bean</span><br>        <span class="hljs-type">BeanDefinition</span> <span class="hljs-variable">beanDefinition</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanDefinition</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">UserService</span>());<br>        beanFactory.registerBeanDefinition(<span class="hljs-string">&quot;userService&quot;</span>, beanDefinition);<br><br>        <span class="hljs-comment">// 3.获取 bean</span><br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> (UserService) beanFactory.getBean(<span class="hljs-string">&quot;userService&quot;</span>);<br>        userService.queryUserInfo();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在测试类中我们编写了Bean工厂初始化、Bean的注册、Bean的获取三个基本步骤</p><p>注册Bean直接将UserService传入进行注册，这很明显太麻烦了，我们使用Spring时注册Bean的操作都是交给BeanFactory进行处理的，后续也会继续优化。</p><h4 id="3、测试"><a href="#3、测试" class="headerlink" title="3、测试"></a>3、测试</h4><p>运行我们的测试类ApiTest。这大概是一个Spring Bean容器的雏形，虽然很简陋但是大致的思路是正确的。</p><p><img src="/%E6%89%8B%E5%86%99spring%EF%BC%881%EF%BC%89.assets/image-20221120191116527.png" alt="image-20221120191116527"></p>]]></content>
    
    
    <categories>
      
      <category>手写Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一个简单的积分系统该如何设计</title>
    <link href="/2022/11/19/2022-11-19-%E6%AF%8F%E6%97%A5%E4%B8%9A%E5%8A%A1%E5%8A%9E%E7%90%86%E5%BE%97%E7%A7%AF%E5%88%86/"/>
    <url>/2022/11/19/2022-11-19-%E6%AF%8F%E6%97%A5%E4%B8%9A%E5%8A%A1%E5%8A%9E%E7%90%86%E5%BE%97%E7%A7%AF%E5%88%86/</url>
    
    <content type="html"><![CDATA[<p>1、表设计</p><p>我们可以设计一张积分详情表用于存储用户的每一个积分操作</p><p>record_detail</p><table><thead><tr><th>id</th><th>UID</th><th>record(积分)</th><th>type（操作类型、 0：减少 1：增加）</th><th>create_time</th><th>expire_time</th><th>operation（操作）</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>10</td><td>0</td><td>20220101</td><td></td><td>消费</td></tr><tr><td>2</td><td>2</td><td>20</td><td>1</td><td>20220101</td><td>20230101</td><td>每日签到</td></tr><tr><td>3</td><td>1</td><td>10</td><td>1</td><td>20220101</td><td>20230101</td><td>每日签到</td></tr></tbody></table><p>这样的设计比较简单，通过过滤过期时间求和就可以得出一个用户的积分，但是这样的设计将所有的积分全放一起，每次都得过滤大量的数据才能得到准确的积分。所有我们可以进行拆分</p><p>这边我们依然保留积分详情表，不过此表的作用是用来提供用户查看积分详情</p><p>record_detail</p><table><thead><tr><th>id</th><th>UID</th><th>record(积分)</th><th>type（操作类型、 0：减少 1：增加）</th><th>create_time</th><th>expire_time</th><th>operation（操作）</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>10</td><td>0</td><td>20220101</td><td></td><td>消费</td></tr><tr><td>2</td><td>2</td><td>20</td><td>1</td><td>20220101</td><td>20230101</td><td>每日签到</td></tr><tr><td>3</td><td>1</td><td>10</td><td>1</td><td>20220101</td><td>20230101</td><td>每日签到</td></tr></tbody></table><p>user_record  引入一个用户积分表才保存每个用户的总积分，在对积分进行操作时同步更新这张表，多一步更新操作换来更快速的积分查询。</p><table><thead><tr><th>id</th><th>UID</th><th>record(积分)</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>10</td></tr><tr><td>2</td><td>2</td><td>20</td></tr><tr><td>3</td><td>1</td><td>10</td></tr></tbody></table><p>不过我们的积分又存在过期行为，那么过期时也需要去更新user_record表，更新的操作可以想到1、利用定时任务每日扫描以便record_detail将过期的积分扣除 2、在用户登录时进行针对用户进行积分更新。方法1每天都需要对record_detail进行全表扫描消耗性能，随着积分数量增多，这个速度会越来越慢，方法2在用户登录时进行更新且将范围缩小至用户可以提升效率但是积分数据存在滞后性，用户不等录就不会去更新积分。</p><p>这时候我们可以针对方法1和方法2  方法1的定时任务可以包装时效，方法2利用用户进行过滤减少扫描数据量  那么我们可以结合两种  依然采用定时任务，不过我们如何缩小扫描数据大小，那就将可用的积分抽取出来做为一张新表，将过期积分也当作对积分的操作，因为该表只存可用积分所有表的大小可控，定时任务保证积分的时效性.</p><p>现在我们的系统有以下几张表。</p><p>record_usable</p><table><thead><tr><th>id</th><th>UID</th><th>record(积分)</th><th>create_time</th><th>expire_time</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>10</td><td>20220101</td><td></td></tr><tr><td>2</td><td>2</td><td>20</td><td>20220101</td><td>20230101</td></tr><tr><td>3</td><td>1</td><td>10</td><td>20220101</td><td>20230101</td></tr></tbody></table><p>record_detail</p><table><thead><tr><th>id</th><th>UID</th><th>record(积分)</th><th>type（操作类型、 0：减少 1：增加）</th><th>create_time</th><th>expire_time</th><th>operation（操作）</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>10</td><td>0</td><td>20220101</td><td></td><td>消费</td></tr><tr><td>2</td><td>2</td><td>20</td><td>1</td><td>20220101</td><td>20230101</td><td>每日签到</td></tr><tr><td>3</td><td>1</td><td>10</td><td>1</td><td>20220101</td><td>20230101</td><td>每日签到</td></tr></tbody></table><p>user_record  </p><table><thead><tr><th>id</th><th>UID</th><th>record(积分)</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>10</td></tr><tr><td>2</td><td>2</td><td>20</td></tr><tr><td>3</td><td>1</td><td>10</td></tr></tbody></table><p>积分的新增、删除、过期操作全部记入到record_detail表中，user_record用于保存用户的总积分数量，record_usable保存用户的可用积分。积分增加时只需要在record_detail表中新增具体操作，在record_usable中插入这条新积分（应该 不会有人让积分刚新增就过期吧）。积分过期需要利用定时任务去可用积分表中将过期的积分取出来，逐条过期，插入record_detail并更新user_record，该操作可用丢到消息队列中去异步完成。那么剩下消费积分该如何设计。积分的消费那需要判断当前用户的积分足部足够进行消费，积分足够时要如何选择需要消费积分，比如我现在需要对1号用户消费15积分，我们应该按照过期时间倒序去record_usable中取积分，判断积分是否满足，所以取到积分1，再取积分2时我们还需5积分，积分2为10积分，这时我们需要将积分2进行拆分，拆分成积分3：5积分，积分4：5积分，然后将积分1和积分3进行消费。大概代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> page=<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">pageSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">needRecord</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>List&lt;Record&gt; deleteR = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>List&lt;Record&gt; l = dao.selectRecordByTime(page,pageSize)<span class="hljs-comment">//按过期时间升序排列</span><br><span class="hljs-keyword">if</span>(l==<span class="hljs-literal">null</span> || l.size()==<span class="hljs-number">0</span>)&#123;<br><span class="hljs-comment">//积分不够</span><br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(Record r : l)&#123;<br><span class="hljs-keyword">if</span>(needRecord&lt;r.recore)&#123;<br><span class="hljs-comment">//拆分积分</span><br>r(needRecord)<br>r1(r.record - needRecord)<br><span class="hljs-comment">//r r1写入数据库</span><br><span class="hljs-keyword">break</span>;<br>&#125;<br>needRecord-=r.record;<br>deleteR.add(r);<br>&#125;<br>&#125;<br><span class="hljs-comment">//deleteR写入record_detail</span><br></code></pre></td></tr></table></figure><p>积分消费解决了，但是又存在一个问题，在用户消费积分时刚好积分过期了该怎么办。我们将积分过期需要的操作使用消息队列进行异步处理，同时我们也可以引入redis锁住用户的积分，在用户消费积分时利用用户ID锁住用户的积分，这时候消费者应该拒绝任务，并将任务重新加入到消息队列中直到积分过期操作完成。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis如何实现附近的人</title>
    <link href="/2022/11/19/2022-11-19-%E4%BD%BF%E7%94%A8redis%E7%9A%84geohash%E5%AE%9E%E7%8E%B0%E5%BF%AB%E9%80%9F%E6%A3%80%E7%B4%A2%E9%99%84%E8%BF%91%E7%9A%84%E4%BA%BA/"/>
    <url>/2022/11/19/2022-11-19-%E4%BD%BF%E7%94%A8redis%E7%9A%84geohash%E5%AE%9E%E7%8E%B0%E5%BF%AB%E9%80%9F%E6%A3%80%E7%B4%A2%E9%99%84%E8%BF%91%E7%9A%84%E4%BA%BA/</url>
    
    <content type="html"><![CDATA[<p>我们需要获取附近的人\物\机构，一般使用经纬度坐标来实现，在数据库中对每条字段都有一个经纬度的坐标，那么我们可以在查询的时候采用范围查询的方式来实现：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-keyword">select</span> * from XXX where X&gt;<span class="hljs-operator">=</span><span class="hljs-keyword">x</span><span class="hljs-number">1</span>-<span class="hljs-keyword">x</span><span class="hljs-number">2</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">x</span>&lt;<span class="hljs-operator">=</span><span class="hljs-keyword">x</span><span class="hljs-number">1</span>+<span class="hljs-keyword">x</span><span class="hljs-number">2</span> <span class="hljs-keyword">and</span> y&gt;<span class="hljs-operator">=</span>y<span class="hljs-number">1</span>-y<span class="hljs-number">2</span> <span class="hljs-keyword">and</span> y&lt;<span class="hljs-operator">=</span>y<span class="hljs-number">1</span>+y<span class="hljs-number">2</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>这样通过范围查询得到具体的字段，但是随着表数据的增多，范围查询的效率会降低，那么我们应该对x，y建立索引来提高性能。</p><p>但是我想着如果这个表的数据不断增大，一个用户可以创建5个家庭，总共用户有400W个那么全部创建家庭最多会存在2亿条数，那么这样利用mysql范围查询依然很慢。 通过查阅资料发现redis有一种geoHash类型的数据结构。</p><p>geo编码指的是将经纬度采用某种分割形式变成2进制串，数值越接近代表地理上也能越接近。</p><p>我们将经纬度转成geo存入geohash中，geohash内部也是一个跳表实现的zset，将我们的key可以指定为字段的ID，source为我们使用geo处理后的geohash，redis还支持GEORADIUS命令来获取指定坐标，指定半径范围内的元素。我们拿到这个值包含key和source，拿到key利用key去数据库查询可以直接提高效率。因为ID有主键索引，查询速度较快且不需要回表。</p><p>相比起将x，y建立索引的方式，采用redis相当于将索引放到的redis里面，利用geo的特性O(logn)的时间复杂度就能查询出对应的ID，再通过ID去数据库取值可以极大程度提高性能。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
